class Solution {
public:
    int backtrack(int i,int total,vector<int>& nums,int target,unordered_map<long,int>& umap){
        if(i==nums.size()) return (total==target)?1:0;
        long key=static_cast<long>(i)<<32 | (total & 0xffffffffL);
        if(umap.count(key)>0) return umap[key];
        int ans=backtrack(i+1,total+nums[i],nums,target,umap)+backtrack(i+1,total-nums[i],nums,target,umap);
        umap[key]=ans;
        return umap[key];
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        unordered_map<long,int> umap;
       return backtrack(0,0,nums,target,umap); 
    }
};
