class Twitter {
public:
    map<int,set<int>> followMap;
    map<int,vector<vector<int>>> tweetMap;
    int count;
    Twitter() {
        count=0;
    }
    
    void postTweet(int userId, int tweetId) {
        tweetMap[userId].push_back({count,tweetId});
        count++;
    }
    
    vector<int> getNewsFeed(int userId) {
        vector<int> res;
        auto compare=[](const vector<int> a,const vector<int> b){
            return a[0]<b[0];
        };
        priority_queue<vector<int>,vector<vector<int>>,decltype(compare)> min_pq(compare);
        followMap[userId].insert(userId);
        for(int followeeId:followMap[userId]){
            if(tweetMap.count(followeeId)){
                const vector<vector<int>>& tweets=tweetMap[followeeId]; 
                int index=tweets.size()-1;
                min_pq.push({tweets[index][0], tweets[index][1], followeeId, index});
            }
        }
        while(!min_pq.empty() && res.size()<10){
            vector<int> curr=min_pq.top();
            min_pq.pop();
            res.push_back(curr[1]);
            if(curr[3]>0){
                const vector<int> & tweet=tweetMap[curr[2]][curr[3]-1];
                min_pq.push({tweet[0],tweet[1],curr[2],curr[3]-1});
            }
        }
        return res;
    }
    
    void follow(int followerId, int followeeId) {
        followMap[followerId].insert(followeeId);
    }
    
    void unfollow(int followerId, int followeeId) {
        followMap[followerId].erase(followeeId);
    }
};
