class Solution {
public:
    bool visit(int i,int j,vector<vector<int>>& matrix,vector<vector<int>>& dp){
        if(i<0 || j<0 || i>=matrix.size() || j>=matrix[0].size()) return false;
        return true;
    }
    int helper(int i,int j,vector<vector<int>>& matrix,vector<vector<int>>& dp){
        int n=matrix.size();
        int m=matrix[0].size();
        if(dp[i][j]!=-1)return dp[i][j];
        int a=0,b=0,c=0,d=0;
        if(visit(i+1,j,matrix,dp) && matrix[i+1][j]>matrix[i][j]) a=helper(i+1,j,matrix,dp);
        if(visit(i,j+1,matrix,dp) && matrix[i][j+1]>matrix[i][j]) b=helper(i,j+1,matrix,dp);
        if(visit(i-1,j,matrix,dp) && matrix[i-1][j]>matrix[i][j]) c=helper(i-1,j,matrix,dp);
        if(visit(i,j-1,matrix,dp) && matrix[i][j-1]>matrix[i][j]) d=helper(i,j-1,matrix,dp);
        dp[i][j]=1+max(a,max(b,max(c,d)));
        return dp[i][j];
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        if(n<=1 && m<=1) return n;
        vector<vector<int>> dp(n,vector<int>(m,-1));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(dp[i][j]==-1) helper(i,j,matrix,dp);
            }
        }
        int maxi=dp[0][0];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                maxi=max(maxi,dp[i][j]);
            }
        }
        return maxi;
    }
};
